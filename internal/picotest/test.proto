// Copyright (C) 2021 Storj Labs, Inc.
// See LICENSE for copying information.

syntax = "proto3";
option go_package = "storj.io/picobuf/internal/picotest";

package picotest;

import "pico.proto";

message Basic {
  int32  byte0 = 1;
  int32  byte1 = 2;
  int32  byte100 = 3;
  int32  byte255 = 4;
  string string_empty = 5;
  string string_hello = 6;
  bytes  bytes_zero = 7;
  bytes  bytes_numbers = 8;
}

message Person {
  string  name = 1;
  Address address = 2;
}

message Address {
  string street = 1;
}

message AllTypes {
  int32    int32 = 1;
  int64    int64 = 2;
  uint32   uint32 = 3;
  uint64   uint64 = 4;
  sint32   sint32 = 5;
  sint64   sint64 = 6;
  fixed32  fixed32 = 7;
  fixed64  fixed64 = 8;
  sfixed32 sfixed32 = 9;
  sfixed64 sfixed64 = 10;
  float    float = 11;
  double   double = 12;
  bool     bool = 13;
  string   string = 14;
  bytes    bytes = 15;

  Message message = 16;

  repeated int32    int32s = 17;
  repeated int64    int64s = 18;
  repeated uint32   uint32s = 19;
  repeated uint64   uint64s = 20;
  repeated sint32   sint32s = 21;
  repeated sint64   sint64s = 22;
  repeated fixed32  fixed32s = 23;
  repeated fixed64  fixed64s = 24;
  repeated sfixed32 sfixed32s = 25;
  repeated sfixed64 sfixed64s = 26;
  repeated float    floats = 27;
  repeated double   doubles = 28;
  repeated bool     bools = 29;
  repeated string   strings = 30;
  repeated bytes    bytess = 31;

  repeated Message messages = 32;
}

message Message {
  int32 int32 = 1;
}

message Piece {
  bytes id  = 1 [(pico.field).custom_type = "storj.io/picobuf/internal/picotest/pic.ID"];
  bytes alt = 2 [
    (pico.field).custom_type = "string",
    (pico.field).custom_serialize = "storj.io/picobuf/internal/picotest/pic.RawString"
  ];
}

message Map {
  map<int32, int32> values = 1;
}

message VariationsScalar {
  string value = 1;
  optional string opt = 2;
  repeated string rep = 3;

  string present_basic = 4        [(pico.field).always_present = true];
  optional string present_opt = 5 [(pico.field).always_present = true];
  repeated string present_rep = 6 [(pico.field).always_present = true];

  optional bytes  opt_bytes = 7;
}

message VariationsMessage {
  Message value = 1;
  optional Message opt = 2;
  repeated Message rep = 3;

  Message present_basic = 4        [(pico.field).always_present = true];
  optional Message present_opt = 5 [(pico.field).always_present = true];
  repeated Message present_rep = 6 [(pico.field).always_present = true];
}

message CustomBytes {
  bytes value = 1 [
    (pico.field).custom_type = "storj.io/picobuf/internal/picotest/pic.ID"
  ];
  optional bytes opt = 2 [
    (pico.field).custom_type = "storj.io/picobuf/internal/picotest/pic.ID"
  ];
  repeated bytes rep = 3 [
   (pico.field).custom_type = "storj.io/picobuf/internal/picotest/pic.ID"
  ];

  bytes present_basic = 4 [
    (pico.field).always_present = true,
    (pico.field).custom_type = "storj.io/picobuf/internal/picotest/pic.ID"
  ];
  optional bytes present_opt = 5 [
    (pico.field).always_present = true,
    (pico.field).custom_type = "storj.io/picobuf/internal/picotest/pic.ID"
  ];
  repeated bytes present_rep = 6 [
   (pico.field).always_present = true,
   (pico.field).custom_type = "storj.io/picobuf/internal/picotest/pic.ID"
  ];
}

message Timestamp {
  int64 seconds = 1;
  int32 nanos = 2;
}

message CustomMessageTypes {
  Timestamp normal = 1;
  Timestamp custom_type = 2 [
    (pico.field).custom_type = "storj.io/picobuf/internal/picotest/pic.Timestamp"
  ];
  Timestamp present_custom_type = 3 [
    (pico.field).always_present = true,
    (pico.field).custom_type = "storj.io/picobuf/internal/picotest/pic.Timestamp"
  ];
  Timestamp custom_type_cast = 4 [
    (pico.field).custom_type = "time.Time",
    (pico.field).custom_serialize = "storj.io/picobuf/picoconv.Timestamp"
  ];
  Timestamp present_custom_type_cast = 5 [
    (pico.field).always_present = true,
    (pico.field).custom_type = "time.Time",
    (pico.field).custom_serialize = "storj.io/picobuf/picoconv.Timestamp"
  ];
  repeated Timestamp repeated_custom_type = 6 [
    (pico.field).custom_type = "storj.io/picobuf/internal/picotest/pic.Timestamp"
  ];
  repeated Timestamp repeated_present_custom_type = 7 [
    (pico.field).always_present = true,
    (pico.field).custom_type = "storj.io/picobuf/internal/picotest/pic.Timestamp"
  ];
  repeated Timestamp repeated_custom_type_cast = 8 [
    (pico.field).custom_type = "time.Time",
    (pico.field).custom_serialize = "storj.io/picobuf/picoconv.Timestamp"
  ];
  repeated Timestamp repeated_present_custom_type_cast = 9 [
    (pico.field).always_present = true,
    (pico.field).custom_type = "time.Time",
    (pico.field).custom_serialize = "storj.io/picobuf/picoconv.Timestamp"
  ];
}

message UnknownMessage {
  option (pico.message).capture_unrecognized_fields = true;
  int64 second = 2;
  int64 fourth = 4;
}

message KnownMessage {
  option (pico.message).capture_unrecognized_fields = true;
  int64 first = 1;
  int64 second = 2;
  int64 third = 3;
  int64 fourth = 4;
}
